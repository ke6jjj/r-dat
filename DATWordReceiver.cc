//
// Copyright 2018, Jeremy Cooper
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
// COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
// ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//

#include <stdio.h>
#include <stdint.h>
#include "DATWordReceiver.h"

enum {
  WORD_INVALID = 0x8000,
  WORD_SYNC = 0x100,
  WORD_ATF2 = 0x200, // ATF Tone F2 (1 and 8 zeros), positive az. signal
  WORD_ATF3 = 0x400, // ATF Tone F3 (1 and 5 zeros), negative az. signal
};

//
// R-DAT 10-to-8 conversion table.
//
// Given a ten-bit word, delivers the eight-bit byte that it represents.
// If the word is invalid, bit 15 will be set (0x8000). The special
// SYNC word is represented by the value 0x100.
//
const uint16_t TenToEightTable[0x400] = {
  0x8000, 0x8000, 0x8000, 0x8200, 0x8000, 0x8000, 0x8200, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8200, 0x8000, 0x8000, 0x8000, 0x8400, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8200, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8400, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8200, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8400, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8200, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8400, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x0064, 0x0070, 0x0065, 0x8000, 0x0060, 0x0066, 0x0061, 0x8000,
  0x8000, 0x0067, 0x8000, 0x8000, 0x0062, 0x8000, 0x0063, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x0098, 0x8000, 0x0099, 0x8000, 0x006c, 0x009f,
  0x006d, 0x8000, 0x009a, 0x006e, 0x009b, 0x8000, 0x0074, 0x0077, 0x0075,
  0x8000, 0x0068, 0x0076, 0x0069, 0x8000, 0x009c, 0x006f, 0x009d, 0x8000,
  0x006a, 0x009e, 0x006b, 0x8200, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x00a4, 0x8000, 0x00a5, 0x8000, 0x8000, 0x00a6,
  0x8000, 0x8000, 0x8000, 0x0071, 0x8000, 0x8000, 0x00a0, 0x8000, 0x00a1,
  0x8000, 0x8000, 0x00a7, 0x8000, 0x8000, 0x00a2, 0x8000, 0x00a3, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x0078, 0x8000, 0x0079, 0x8000, 0x00ac,
  0x007f, 0x00ad, 0x8000, 0x007a, 0x00ae, 0x007b, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x00a8, 0x8000, 0x00a9, 0x8000, 0x007c, 0x00af, 0x007d,
  0x8000, 0x00aa, 0x007e, 0x00ab, 0x8000, 0x8000, 0x8000, 0x8000, 0x8400,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x0100, 0x0011, 0x8000, 0x8000, 0x0040, 0x8000,
  0x0041, 0x8000, 0x8000, 0x0047, 0x8000, 0x8000, 0x0042, 0x8000, 0x0043,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x0050, 0x8000, 0x0051, 0x8000,
  0x004c, 0x0057, 0x004d, 0x8000, 0x0052, 0x004e, 0x0053, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x0048, 0x8000, 0x0049, 0x8000, 0x0054, 0x004f,
  0x0055, 0x8000, 0x004a, 0x0056, 0x004b, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x00d0, 0x8000, 0x00d1, 0x8000, 0x0004, 0x00d7, 0x0005, 0x8000,
  0x00d2, 0x0006, 0x00d3, 0x8000, 0x0044, 0x0012, 0x0045, 0x8000, 0x0000,
  0x0046, 0x0001, 0x8000, 0x00d4, 0x0007, 0x00d5, 0x8000, 0x0002, 0x00d6,
  0x0003, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x0018, 0x8000, 0x0019,
  0x8000, 0x000c, 0x001f, 0x000d, 0x8000, 0x001a, 0x000e, 0x001b, 0x8000,
  0x0014, 0x0013, 0x0015, 0x8000, 0x0008, 0x0016, 0x0009, 0x8000, 0x001c,
  0x000f, 0x001d, 0x8000, 0x000a, 0x001e, 0x000b, 0x8200, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x00c4, 0x8000, 0x00c5,
  0x8000, 0x8000, 0x00c6, 0x8000, 0x8000, 0x8000, 0x0031, 0x8000, 0x8000,
  0x00c0, 0x8000, 0x00c1, 0x8000, 0x8000, 0x00c7, 0x8000, 0x8000, 0x00c2,
  0x8000, 0x00c3, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x0058, 0x8000,
  0x0059, 0x8000, 0x00cc, 0x005f, 0x00cd, 0x8000, 0x005a, 0x00ce, 0x005b,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x00c8, 0x8000, 0x00c9, 0x8000,
  0x005c, 0x00cf, 0x005d, 0x8000, 0x00ca, 0x005e, 0x00cb, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x0038, 0x8000, 0x0039, 0x8000, 0x8000, 0x003f,
  0x8000, 0x8000, 0x003a, 0x8000, 0x003b, 0x8000, 0x0024, 0x0030, 0x0025,
  0x8000, 0x0020, 0x0026, 0x0021, 0x8000, 0x003c, 0x0027, 0x003d, 0x8000,
  0x0022, 0x003e, 0x0023, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x00f8,
  0x8000, 0x00f9, 0x8000, 0x002c, 0x00ff, 0x002d, 0x8000, 0x00fa, 0x002e,
  0x00fb, 0x8000, 0x0034, 0x0037, 0x0035, 0x8000, 0x0028, 0x0036, 0x0029,
  0x8000, 0x00fc, 0x002f, 0x00fd, 0x8000, 0x002a, 0x00fe, 0x002b, 0x8000,
  0x8200, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8400, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x0084, 0x8000, 0x0085, 0x8000, 0x8000, 0x0086, 0x8000, 0x8000,
  0x0064, 0x0072, 0x0065, 0x8000, 0x0080, 0x0066, 0x0081, 0x8000, 0x8000,
  0x0087, 0x8000, 0x8000, 0x0082, 0x8000, 0x0083, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x0098, 0x8000, 0x0099, 0x8000, 0x008c, 0x009f, 0x008d,
  0x8000, 0x009a, 0x008e, 0x009b, 0x8000, 0x0074, 0x0073, 0x0075, 0x8000,
  0x0088, 0x0076, 0x0089, 0x8000, 0x009c, 0x008f, 0x009d, 0x8000, 0x008a,
  0x009e, 0x008b, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x00a4, 0x8000, 0x00a5, 0x8000, 0x8000, 0x00a6, 0x8000,
  0x8000, 0x8000, 0x0071, 0x8000, 0x8000, 0x00a0, 0x8000, 0x00a1, 0x8000,
  0x8000, 0x00a7, 0x8000, 0x8000, 0x00a2, 0x8000, 0x00a3, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x00b8, 0x8000, 0x00b9, 0x8000, 0x00ac, 0x00bf,
  0x00ad, 0x8000, 0x00ba, 0x00ae, 0x00bb, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x00a8, 0x8000, 0x00a9, 0x8000, 0x00bc, 0x00af, 0x00bd, 0x8000,
  0x00aa, 0x00be, 0x00ab, 0x8200, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x0100, 0x0011, 0x8000, 0x8000, 0x0040, 0x8000, 0x0041,
  0x8000, 0x8000, 0x0047, 0x8000, 0x8000, 0x0042, 0x8000, 0x0043, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x0090, 0x8000, 0x0091, 0x8000, 0x004c,
  0x0097, 0x004d, 0x8000, 0x0092, 0x004e, 0x0093, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x0048, 0x8000, 0x0049, 0x8000, 0x0094, 0x004f, 0x0095,
  0x8000, 0x004a, 0x0096, 0x004b, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x00d0, 0x8000, 0x00d1, 0x8000, 0x00f4, 0x00d7, 0x00f5, 0x8000, 0x00d2,
  0x00f6, 0x00d3, 0x8000, 0x0044, 0x0010, 0x0045, 0x8000, 0x00f0, 0x0046,
  0x00f1, 0x8000, 0x00d4, 0x00f7, 0x00d5, 0x8000, 0x00f2, 0x00d6, 0x00f3,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x0018, 0x8000, 0x0019, 0x8000,
  0x00b4, 0x001f, 0x00b5, 0x8000, 0x001a, 0x00b6, 0x001b, 0x8000, 0x0014,
  0x0017, 0x0015, 0x8000, 0x00b0, 0x0016, 0x00b1, 0x8000, 0x001c, 0x00b7,
  0x001d, 0x8000, 0x00b2, 0x001e, 0x00b3, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x00c4, 0x8000, 0x00c5, 0x8000,
  0x8000, 0x00c6, 0x8000, 0x8000, 0x8000, 0x0031, 0x8000, 0x8000, 0x00c0,
  0x8000, 0x00c1, 0x8000, 0x8000, 0x00c7, 0x8000, 0x8000, 0x00c2, 0x8000,
  0x00c3, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x00d8, 0x8000, 0x00d9,
  0x8000, 0x00cc, 0x00df, 0x00cd, 0x8000, 0x00da, 0x00ce, 0x00db, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x00c8, 0x8000, 0x00c9, 0x8000, 0x00dc,
  0x00cf, 0x00dd, 0x8000, 0x00ca, 0x00de, 0x00cb, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x0038, 0x8000, 0x0039, 0x8000, 0x00e4, 0x003f, 0x00e5,
  0x8000, 0x003a, 0x00e6, 0x003b, 0x8000, 0x0024, 0x0032, 0x0025, 0x8000,
  0x00e0, 0x0026, 0x00e1, 0x8000, 0x003c, 0x00e7, 0x003d, 0x8000, 0x00e2,
  0x003e, 0x00e3, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x00f8, 0x8000,
  0x00f9, 0x8000, 0x00ec, 0x00ff, 0x00ed, 0x8000, 0x00fa, 0x00ee, 0x00fb,
  0x8000, 0x0034, 0x0033, 0x0035, 0x8000, 0x00e8, 0x0036, 0x00e9, 0x8000,
  0x00fc, 0x00ef, 0x00fd, 0x8000, 0x00ea, 0x00fe, 0x00eb,
};

DATWordReceiver::DATWordReceiver(DATBlockReceiver *r, bool dump) : mDump(dump),
  mBlockReceiver(r)
{
}

DATWordReceiver::~DATWordReceiver()
{
}

//
// Receive a word.
//
void
DATWordReceiver::ReceiveWord(int word)
{
  uint16_t decode;

  if (word > 0 && word <= 0x3ff) {
    //
    // Decode the ten-bit word into an eight-bit byte.
    //
    decode = TenToEightTable[word];
  } else {
    //
    // Caller is sending us something weird.
    //
    decode = WORD_INVALID;
  }

  if (mDump)
    DumpWord(word, decode);
  else
    ReceiveWord(word, decode);
}

void
DATWordReceiver::DumpWord(uint16_t raw, uint16_t decode)
{
  if (decode & WORD_SYNC) {
    printf("\nSYNC");
  } else if (decode & WORD_ATF2) {
    printf(" AT2");
  } else if (decode & WORD_ATF3) {
    printf(" AT3");
  } else if (decode & WORD_INVALID) {
    printf(" XXX");
  } else {
    printf(" %02x", decode);
  }
}

void
DATWordReceiver::ReceiveWord(uint16_t raw, uint16_t decode)
{
  if (decode & WORD_SYNC)
    mBlock.Reset();
  if (decode & WORD_ATF2)
    mBlockReceiver->ReceiveATFTone(2);
  if (decode & WORD_ATF3)
    mBlockReceiver->ReceiveATFTone(3);

  bool complete = mBlock.AddByte(raw, decode);

  if (complete)
    DumpCurrentBlock();
}

void
DATWordReceiver::DumpCurrentBlock()
{
  mBlockReceiver->ReceiveBlock(mBlock);
  mBlock.Reset();
}

void
DATWordReceiver::TrackDetected(bool up)
{
  if (mDump)
    return;

  if (up == false) {
    //
    // Track is ending. Dump any pending blocks.
    //
    DumpCurrentBlock();
  }

  //
  // Notify the block receiver of the new track state.
  //
  mBlockReceiver->TrackDetected(up);
}

void
DATWordReceiver::Stop()
{
  if (mBlock.Size() > 0)
    DumpCurrentBlock();
  if (mBlockReceiver != NULL)
    mBlockReceiver->Stop();
}
