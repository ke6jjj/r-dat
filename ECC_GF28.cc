//
// Copyright 2018, Jeremy Cooper
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
// COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
// ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//

#include "ECC_GF28.h"

//
// The reduction polynomial for this field in binary representation.
//
// The real polynomial is understood to be:
//
//   g(x) = x^8 + x^4 + x^3 + x^2 + 1
//
// but we represent it here as g(2) with the 2^8 power removed.
//
static const uint8_t kReductionPoly = 0x1d;

//
// The field primitive generator.
//
// g(x) = x
//
// Here it is g(2)
//
static const uint8_t kAlpha = 2;

//
// The fully generated field sequence, taken from successive powers of alpha.
//
static const uint8_t kPowAlpha[255] = {
  0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1d,0x3a,0x74,0xe8,0xcd,0x87,0x13,
  0x26,0x4c,0x98,0x2d,0x5a,0xb4,0x75,0xea,0xc9,0x8f,0x03,0x06,0x0c,0x18,0x30,
  0x60,0xc0,0x9d,0x27,0x4e,0x9c,0x25,0x4a,0x94,0x35,0x6a,0xd4,0xb5,0x77,0xee,
  0xc1,0x9f,0x23,0x46,0x8c,0x05,0x0a,0x14,0x28,0x50,0xa0,0x5d,0xba,0x69,0xd2,
  0xb9,0x6f,0xde,0xa1,0x5f,0xbe,0x61,0xc2,0x99,0x2f,0x5e,0xbc,0x65,0xca,0x89,
  0x0f,0x1e,0x3c,0x78,0xf0,0xfd,0xe7,0xd3,0xbb,0x6b,0xd6,0xb1,0x7f,0xfe,0xe1,
  0xdf,0xa3,0x5b,0xb6,0x71,0xe2,0xd9,0xaf,0x43,0x86,0x11,0x22,0x44,0x88,0x0d,
  0x1a,0x34,0x68,0xd0,0xbd,0x67,0xce,0x81,0x1f,0x3e,0x7c,0xf8,0xed,0xc7,0x93,
  0x3b,0x76,0xec,0xc5,0x97,0x33,0x66,0xcc,0x85,0x17,0x2e,0x5c,0xb8,0x6d,0xda,
  0xa9,0x4f,0x9e,0x21,0x42,0x84,0x15,0x2a,0x54,0xa8,0x4d,0x9a,0x29,0x52,0xa4,
  0x55,0xaa,0x49,0x92,0x39,0x72,0xe4,0xd5,0xb7,0x73,0xe6,0xd1,0xbf,0x63,0xc6,
  0x91,0x3f,0x7e,0xfc,0xe5,0xd7,0xb3,0x7b,0xf6,0xf1,0xff,0xe3,0xdb,0xab,0x4b,
  0x96,0x31,0x62,0xc4,0x95,0x37,0x6e,0xdc,0xa5,0x57,0xae,0x41,0x82,0x19,0x32,
  0x64,0xc8,0x8d,0x07,0x0e,0x1c,0x38,0x70,0xe0,0xdd,0xa7,0x53,0xa6,0x51,0xa2,
  0x59,0xb2,0x79,0xf2,0xf9,0xef,0xc3,0x9b,0x2b,0x56,0xac,0x45,0x8a,0x09,0x12,
  0x24,0x48,0x90,0x3d,0x7a,0xf4,0xf5,0xf7,0xf3,0xfb,0xeb,0xcb,0x8b,0x0b,0x16,
  0x2c,0x58,0xb0,0x7d,0xfa,0xe9,0xcf,0x83,0x1b,0x36,0x6c,0xd8,0xad,0x47,0x8e,
};

//
// This is a table of discrete logarithms in base alpha, the field primitive,
// for each field element. (The entry for the zero field element is present,
// but it of course has no valid value as log(0) is undefined).
//
static const uint8_t kLogAlpha[256] = {
  0x00,0x00,0x01,0x19,0x02,0x32,0x1a,0xc6,0x03,0xdf,0x33,0xee,0x1b,0x68,0xc7,
  0x4b,0x04,0x64,0xe0,0x0e,0x34,0x8d,0xef,0x81,0x1c,0xc1,0x69,0xf8,0xc8,0x08,
  0x4c,0x71,0x05,0x8a,0x65,0x2f,0xe1,0x24,0x0f,0x21,0x35,0x93,0x8e,0xda,0xf0,
  0x12,0x82,0x45,0x1d,0xb5,0xc2,0x7d,0x6a,0x27,0xf9,0xb9,0xc9,0x9a,0x09,0x78,
  0x4d,0xe4,0x72,0xa6,0x06,0xbf,0x8b,0x62,0x66,0xdd,0x30,0xfd,0xe2,0x98,0x25,
  0xb3,0x10,0x91,0x22,0x88,0x36,0xd0,0x94,0xce,0x8f,0x96,0xdb,0xbd,0xf1,0xd2,
  0x13,0x5c,0x83,0x38,0x46,0x40,0x1e,0x42,0xb6,0xa3,0xc3,0x48,0x7e,0x6e,0x6b,
  0x3a,0x28,0x54,0xfa,0x85,0xba,0x3d,0xca,0x5e,0x9b,0x9f,0x0a,0x15,0x79,0x2b,
  0x4e,0xd4,0xe5,0xac,0x73,0xf3,0xa7,0x57,0x07,0x70,0xc0,0xf7,0x8c,0x80,0x63,
  0x0d,0x67,0x4a,0xde,0xed,0x31,0xc5,0xfe,0x18,0xe3,0xa5,0x99,0x77,0x26,0xb8,
  0xb4,0x7c,0x11,0x44,0x92,0xd9,0x23,0x20,0x89,0x2e,0x37,0x3f,0xd1,0x5b,0x95,
  0xbc,0xcf,0xcd,0x90,0x87,0x97,0xb2,0xdc,0xfc,0xbe,0x61,0xf2,0x56,0xd3,0xab,
  0x14,0x2a,0x5d,0x9e,0x84,0x3c,0x39,0x53,0x47,0x6d,0x41,0xa2,0x1f,0x2d,0x43,
  0xd8,0xb7,0x7b,0xa4,0x76,0xc4,0x17,0x49,0xec,0x7f,0x0c,0x6f,0xf6,0x6c,0xa1,
  0x3b,0x52,0x29,0x9d,0x55,0xaa,0xfb,0x60,0x86,0xb1,0xbb,0xcc,0x3e,0x5a,0xcb,
  0x59,0x5f,0xb0,0x9c,0xa9,0xa0,0x51,0x0b,0xf5,0x16,0xeb,0x7a,0x75,0x2c,0xd7,
  0x4f,0xae,0xd5,0xe9,0xe6,0xe7,0xad,0xe8,0x74,0xd6,0xf4,0xea,0xa8,0x50,0x58,
  0xaf  
};

//
// This is a table of the inverse of every field element. The zero element
// has no valid inverse, but it is part of the table to make lookups
// easier.
//
static const uint8_t kInverse[256] = {
  0x00,0x01,0x8e,0xf4,0x47,0xa7,0x7a,0xba,0xad,0x9d,0xdd,0x98,0x3d,0xaa,0x5d,
  0x96,0xd8,0x72,0xc0,0x58,0xe0,0x3e,0x4c,0x66,0x90,0xde,0x55,0x80,0xa0,0x83,
  0x4b,0x2a,0x6c,0xed,0x39,0x51,0x60,0x56,0x2c,0x8a,0x70,0xd0,0x1f,0x4a,0x26,
  0x8b,0x33,0x6e,0x48,0x89,0x6f,0x2e,0xa4,0xc3,0x40,0x5e,0x50,0x22,0xcf,0xa9,
  0xab,0x0c,0x15,0xe1,0x36,0x5f,0xf8,0xd5,0x92,0x4e,0xa6,0x04,0x30,0x88,0x2b,
  0x1e,0x16,0x67,0x45,0x93,0x38,0x23,0x68,0x8c,0x81,0x1a,0x25,0x61,0x13,0xc1,
  0xcb,0x63,0x97,0x0e,0x37,0x41,0x24,0x57,0xca,0x5b,0xb9,0xc4,0x17,0x4d,0x52,
  0x8d,0xef,0xb3,0x20,0xec,0x2f,0x32,0x28,0xd1,0x11,0xd9,0xe9,0xfb,0xda,0x79,
  0xdb,0x77,0x06,0xbb,0x84,0xcd,0xfe,0xfc,0x1b,0x54,0xa1,0x1d,0x7c,0xcc,0xe4,
  0xb0,0x49,0x31,0x27,0x2d,0x53,0x69,0x02,0xf5,0x18,0xdf,0x44,0x4f,0x9b,0xbc,
  0x0f,0x5c,0x0b,0xdc,0xbd,0x94,0xac,0x09,0xc7,0xa2,0x1c,0x82,0x9f,0xc6,0x34,
  0xc2,0x46,0x05,0xce,0x3b,0x0d,0x3c,0x9c,0x08,0xbe,0xb7,0x87,0xe5,0xee,0x6b,
  0xeb,0xf2,0xbf,0xaf,0xc5,0x64,0x07,0x7b,0x95,0x9a,0xae,0xb6,0x12,0x59,0xa5,
  0x35,0x65,0xb8,0xa3,0x9e,0xd2,0xf7,0x62,0x5a,0x85,0x7d,0xa8,0x3a,0x29,0x71,
  0xc8,0xf6,0xf9,0x43,0xd7,0xd6,0x10,0x73,0x76,0x78,0x99,0x0a,0x19,0x91,0x14,
  0x3f,0xe6,0xf0,0x86,0xb1,0xe2,0xf1,0xfa,0x74,0xf3,0xb4,0x6d,0x21,0xb2,0x6a,
  0xe3,0xe7,0xb5,0xea,0x03,0x8f,0xd3,0xc9,0x42,0xd4,0xe8,0x75,0x7f,0xff,0x7e,
  0xfd
};

uint8_t
ECC_GF28_multiply(uint8_t a, uint8_t b)
{
  if (a == 0 || b == 0)
    return 0;

  if (a == 1)
    return b;

  if (b == 1)
    return a;
  
  //
  // Use the discrete logarithm table to make multiplicaton an O(1)
  // operation.
  //
  return kPowAlpha[(kLogAlpha[a] + kLogAlpha[b]) % 255];
}

uint8_t
ECC_GF28_invert(uint8_t a)
{
  return kInverse[a];
}

//
// Evaluate the value of a polynomial in x when x is a specific value.
//
uint8_t
ECC_GF28_evaluate(const uint8_t p[], uint8_t x, size_t n)
{
  uint8_t y = 1;
  uint8_t res = 0;
  
  for (size_t i = 0; i < n; i++) {
    res ^= ECC_GF28_multiply(p[i], y);
    y = ECC_GF28_multiply(y, x);
  }
  
  return res;
}

//
// Return a specific power of the generator, alpha.
//
uint8_t
ECC_GF28_pow_alpha(uint8_t n)
{
  if (n > 254)
    n = 0;
  
  return kPowAlpha[n];
}
