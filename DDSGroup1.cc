//
// Copyright 2018, Jeremy Cooper
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
// COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
// ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//

#include "DDSGroup1.h"

static const uint8_t G2LFSR[512] = {
  0x00,0x01,0x03,0x02,0x06,0x07,0x05,0x04,0x0c,0x0d,0x0f,0x0e,0x0a,0x0b,0x09,
  0x08,0x18,0x19,0x1b,0x1a,0x1e,0x1f,0x1d,0x1c,0x14,0x15,0x17,0x16,0x12,0x13,
  0x11,0x10,0x30,0x31,0x33,0x32,0x36,0x37,0x35,0x34,0x3c,0x3d,0x3f,0x3e,0x3a,
  0x3b,0x39,0x38,0x28,0x29,0x2b,0x2a,0x2e,0x2f,0x2d,0x2c,0x24,0x25,0x27,0x26,
  0x22,0x23,0x21,0x20,0x60,0x61,0x63,0x62,0x66,0x67,0x65,0x64,0x6c,0x6d,0x6f,
  0x6e,0x6a,0x6b,0x69,0x68,0x78,0x79,0x7b,0x7a,0x7e,0x7f,0x7d,0x7c,0x74,0x75,
  0x77,0x76,0x72,0x73,0x71,0x70,0x50,0x51,0x53,0x52,0x56,0x57,0x55,0x54,0x5c,
  0x5d,0x5f,0x5e,0x5a,0x5b,0x59,0x58,0x48,0x49,0x4b,0x4a,0x4e,0x4f,0x4d,0x4c,
  0x44,0x45,0x47,0x46,0x42,0x43,0x41,0x40,0xc0,0xc1,0xc3,0xc2,0xc6,0xc7,0xc5,
  0xc4,0xcc,0xcd,0xcf,0xce,0xca,0xcb,0xc9,0xc8,0xd8,0xd9,0xdb,0xda,0xde,0xdf,
  0xdd,0xdc,0xd4,0xd5,0xd7,0xd6,0xd2,0xd3,0xd1,0xd0,0xf0,0xf1,0xf3,0xf2,0xf6,
  0xf7,0xf5,0xf4,0xfc,0xfd,0xff,0xfe,0xfa,0xfb,0xf9,0xf8,0xe8,0xe9,0xeb,0xea,
  0xee,0xef,0xed,0xec,0xe4,0xe5,0xe7,0xe6,0xe2,0xe3,0xe1,0xe0,0xa0,0xa1,0xa3,
  0xa2,0xa6,0xa7,0xa5,0xa4,0xac,0xad,0xaf,0xae,0xaa,0xab,0xa9,0xa8,0xb8,0xb9,
  0xbb,0xba,0xbe,0xbf,0xbd,0xbc,0xb4,0xb5,0xb7,0xb6,0xb2,0xb3,0xb1,0xb0,0x90,
  0x91,0x93,0x92,0x96,0x97,0x95,0x94,0x9c,0x9d,0x9f,0x9e,0x9a,0x9b,0x99,0x98,
  0x88,0x89,0x8b,0x8a,0x8e,0x8f,0x8d,0x8c,0x84,0x85,0x87,0x86,0x82,0x83,0x81,
  0x80,0x80,0x81,0x83,0x82,0x86,0x87,0x85,0x84,0x8c,0x8d,0x8f,0x8e,0x8a,0x8b,
  0x89,0x88,0x98,0x99,0x9b,0x9a,0x9e,0x9f,0x9d,0x9c,0x94,0x95,0x97,0x96,0x92,
  0x93,0x91,0x90,0xb0,0xb1,0xb3,0xb2,0xb6,0xb7,0xb5,0xb4,0xbc,0xbd,0xbf,0xbe,
  0xba,0xbb,0xb9,0xb8,0xa8,0xa9,0xab,0xaa,0xae,0xaf,0xad,0xac,0xa4,0xa5,0xa7,
  0xa6,0xa2,0xa3,0xa1,0xa0,0xe0,0xe1,0xe3,0xe2,0xe6,0xe7,0xe5,0xe4,0xec,0xed,
  0xef,0xee,0xea,0xeb,0xe9,0xe8,0xf8,0xf9,0xfb,0xfa,0xfe,0xff,0xfd,0xfc,0xf4,
  0xf5,0xf7,0xf6,0xf2,0xf3,0xf1,0xf0,0xd0,0xd1,0xd3,0xd2,0xd6,0xd7,0xd5,0xd4,
  0xdc,0xdd,0xdf,0xde,0xda,0xdb,0xd9,0xd8,0xc8,0xc9,0xcb,0xca,0xce,0xcf,0xcd,
  0xcc,0xc4,0xc5,0xc7,0xc6,0xc2,0xc3,0xc1,0xc0,0x40,0x41,0x43,0x42,0x46,0x47,
  0x45,0x44,0x4c,0x4d,0x4f,0x4e,0x4a,0x4b,0x49,0x48,0x58,0x59,0x5b,0x5a,0x5e,
  0x5f,0x5d,0x5c,0x54,0x55,0x57,0x56,0x52,0x53,0x51,0x50,0x70,0x71,0x73,0x72,
  0x76,0x77,0x75,0x74,0x7c,0x7d,0x7f,0x7e,0x7a,0x7b,0x79,0x78,0x68,0x69,0x6b,
  0x6a,0x6e,0x6f,0x6d,0x6c,0x64,0x65,0x67,0x66,0x62,0x63,0x61,0x60,0x20,0x21,
  0x23,0x22,0x26,0x27,0x25,0x24,0x2c,0x2d,0x2f,0x2e,0x2a,0x2b,0x29,0x28,0x38,
  0x39,0x3b,0x3a,0x3e,0x3f,0x3d,0x3c,0x34,0x35,0x37,0x36,0x32,0x33,0x31,0x30,
  0x10,0x11,0x13,0x12,0x16,0x17,0x15,0x14,0x1c,0x1d,0x1f,0x1e,0x1a,0x1b,0x19,
  0x18,0x08,0x09,0x0b,0x0a,0x0e,0x0f,0x0d,0x0c,0x04,0x05,0x07,0x06,0x02,0x03,
  0x01,0x00
};

DDSGroup1::DDSGroup1(DDSGroup3& g3)
  : mBasicGroupID(g3.BasicGroupID()), mSubFrameID(g3.LogicalFrameID()),
    mIsECCFrame(g3.IsECC3Frame()), mIsLastFrame(g3.IsLastLogicalFrame())
{
  //
  // The data in the G3 is a G2 group wrapper with a header row. The G2
  // group is a G1 group with a data whitening LFSR stream added to it.
  // We need to remove that whitening as we write the data out.
  //
  
  //
  // Fetch a pointer to the data and validity arrays of the G3 frame.
  //
  const DATFrame::DataArray& data = g3.Frame().Data();
  const DATFrame::ValidityArray& valid = g3.Frame().Valid();
  
  uint16_t lfsr = 1;
  
  for (size_t i = 1; i < DATFrame::kUserDataRows; i++) {
    for (size_t j = 0; j < DATFrame::kBytesPerRow; j++) {
      //
      // Look up the data.
      //
      uint8_t byte = data[i][j];
      
      //
      // Dewhiten it.
      //
      byte ^= (lfsr & 0xff);
      
      //
      // Store it in our array.
      //
      mData[(i - 1) * 4 + j] = byte;
      mDataIsValid[(i - 1) * 4 + j] = valid[i][j];
       
      //
      // Crank the LFSR.
      //
      lfsr = (((uint16_t)(G2LFSR[lfsr & 0x1ff])) << 7) | ((lfsr >> 8) & 0xff);
    }
  }
}

DDSGroup1::~DDSGroup1()
{
}

const DDSGroup1::DataArray&
DDSGroup1::Data() const
{
  return mData;
}

const DDSGroup1::ValidArray&
DDSGroup1::Valid() const
{
  return mDataIsValid;
}

uint32_t
DDSGroup1::BasicGroupID() const
{
  return mBasicGroupID;
}

bool
DDSGroup1::IsLastFrame() const
{
  return mIsLastFrame;
}

bool
DDSGroup1::IsECCFrame() const
{
  return mIsECCFrame;
}

uint8_t
DDSGroup1::SubFrameID() const
{
  return mSubFrameID;
}
